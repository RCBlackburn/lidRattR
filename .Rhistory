x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
rgl::grid3d(c("x","y","z"))
x.5 = seq(min(vox$X)+5, max(vox$X), 5)
y.5 = seq(min(vox$Y)+5, max(vox$Y), 5)
z.5 = seq(min(vox$Z)+5, 45, 5)
rgl::grid3d(c("x.5","y.5","z.5"))
x.5 = seq(min(vox$X)+5, max(vox$X) + 5, 5)
y.5 = seq(min(vox$Y)+5, max(vox$Y) + 5, 5)
z.5 = seq(min(vox$Z)+5, 45, 5)
rgl::grid3d(c("x.5","y.5","z.5"))
z.5 = seq(min(vox$Z)+10, 45, 5)
rgl::grid3d(c("x.5","y.5","z.5"))
data.table::setDT(all_vox)
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
fullvox <- as.data.frame(fullvox)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, axis = T)
rgl::grid3d(c("x","y","z"))
chm <- grid_canopy(high, 0.25, pitfree(c(0,2,5,10,15), c(0,1), subcircle = 0.2))
lastrees(high, watershed(chm))
las.tree <- lastrees(high, watershed(chm))
plot(las.tree)
plot(las.tree, size = 6, axis = T, col = treeID, colorPalette = viridis::inferno(10, begin = .15))
plot(las.tree, size = 6, axis = T, col = "treeID", colorPalette = viridis::inferno(10, begin = .15))
plot(las.tree, size = 6, axis = T, col = "treeID", colorPalette = viridis::inferno(10, begin = .15))
fri_ph1_FVS_out <- read.csv("All_Response_metric_update.csv")
fri_ph1_FVS_out <- fri_ph1_FVS_out %>% filter(Site == "4FRI_Ph1")
fri_ph1_sf <- read_sf("vectors/All_lidar_plots_0.1ac.shp")
library(tidyverse)
library(lidR)
library(lidRmts)
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
high <- readLAS("viz/high_density.las")
plot(med)
plot(med, colorPalette = viridis::magma(10))
plot(med, colorPalette = viridis::magma(10, begin = .2))
plot(med, colorPalette = viridis::magma(10, begin = .3))
plot(med, colorPalette = viridis::magma(10, begin = .3), size = 5)
library(tidyverse)
library(lidR)
library(lidRmts)
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
high <- readLAS("viz/high_density.las")
plot(med)
plot(med, colorPalette = viridis::magma())
plot(med, colorPalette = viridis::magma(n=50))
plot(med, colorPalette = viridis::magma(n=50, begin = .2))
plot(med, colorPalette = viridis::magma(n=50, begin = .3))
plot(med, colorPalette = viridis::magma(n=50), bg = "white" )
plot(low, colorPalette = viridis::magma(n=50), bg = "white")
high <- readLAS("viz/high_density.las")
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
library(tidyverse)
library(lidR)
library(lidRmts)
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
vox_mt <- function(z, i)
{
metrics =list(
SVi = length(z), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(z),
mean_z_vox = mean(z),
var_z_vox = var(z),
sd_z_vox = sd(z),
cv_z_vox = sd(z)/mean(z),
IQR_z_vox = IQR(z),
skew_z_vox = (sum((z - mean(z))^3)/length(z))/(sum((z - mean(z))^2)/length(z))^(3/2),
kurt_z_vox = length(z)*sum((z - mean(z))^4)/(sum((z- mean(z))^2)^2),
med_i_vox = median(i),
mean_i_vox = mean(i),
var_i_vox = var(i),
sd_i_vox = sd(i),
cv_i_vox = sd(i)/mean(i),
IQR_i_vox = IQR(i),
skew_i_vox = (sum((i - mean(i))^3)/length(z))/(sum((i - mean(i))^2)/length(z))^(3/2),
kurt_i_vox = length(z)*sum((i - mean(i))^4)/(sum((i- mean(i))^2)^2),
Z_list = list(z),
I_list = list(as.numeric(i))
)
return(metrics)
}
las = med
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
resolution = 1
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(min(vox$X), max(vox$X), resolution)
y = seq(min(vox$Y), max(vox$Y), resolution)
z = seq(min(vox$Z), max_z, resolution)
max_z = 40
all_vox = expand.grid(X = x, Y = y, Z = z)
z = seq(min(vox$Z), max_z, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
plot(all_vox)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
plot(full_vox)
plot(fullvox)
resolution = 5
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(min(vox$X), max(vox$X), resolution)
y = seq(min(vox$Y), max(vox$Y), resolution)
z = seq(min(vox$Z), max_z, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
plot(full_vox)
plot(fullvox)
knitr::opts_chunk$set(echo = TRUE)
las <- readLAS("viz/viz.las")
library(lidR)
las <- readLAS("viz/viz.las")
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
rgl::grid3d(c("x", "y+", "z"))
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
library(rgl)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
rgl::grid3d(c("x", "y+", "z"))
install.packages("knitr")
install.packages("knitr")
library(lidR)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
```{r, echo = FALSE, webgl = TRUE}
las <- readLAS("viz/viz.las")
plotids <- with(las, plot3d(las@data$X, las@data$Y, las@data$Z,
type="s", col=as.numeric(Species)))
plotids <- with(las, plot3d(las@data$X, las@data$Y, las@data$Z,
type="s", col=as.numeric(Z)))
plotids <- with(las@data, plot3d(las@data$X, las@data$Y, las@data$Z,
type="s", col=as.numeric(Z)))
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
plot3d() i
plot3d()
library(lidR)
library(rgl)
las <- readLAS("viz/viz.las")
dat <- las@data
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=as.numeric(Z)))
min(dat$Z)
dat[dat$z < 0]$Z <- 0
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=as.numeric(Z)))
min(dat$Z)
dat[dat$z < 0]$Z
dat[dat$z < 0]$Z
dat[dat$z < 0]
dat$z < 0
View(dat)
dat[dat$Z < 0]$Z <- 0
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=as.numeric(Z)))
View(dat)
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z))
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z))
dat[dat$Z =< 0]$Z <- 0.00001
dat[dat$Z <= 0]$Z <- 0.00001
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z))
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z, size = 1))
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z, size = 1,colorPalette = viridis::magma(n = 50)))
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 3, axis = T)
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 3, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
grid3d(c("x", "y+", "z"))
rgl::movie3d( rgl::spin3d(), duration = 10, movie = "anglr", dir = dir)
play3d(spin3d(), duration = 12 )
### cloud diagram
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
rgl::grid3d(c("x", "y+", "z"))
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
dir = "~/Desktop",
type = "gif",
clean = TRUE
)
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
type = "gif",
clean = TRUE
)
movie3d(
movie="3dAnimatedScatterplot",
spin3d(),
duration = 10,
type = "gif",
clean = TRUE
)
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
type = "gif",
clean = TRUE
)
knit_with_parameters('~/Github/lidRmts/README.Rmd')
setwd("~/Projects/Dissertation/chapter1/Methods_viz")
library("lidR")
library(rgl)
library(magick)
system("cmd.exe", input = paste("cd", getwd(), "&& convert -loop 0 cloud.gif philae.gif"))
paste("cd", getwd(), "&& convert -loop 0 cloud.gif philae.gif")
system("cmd.exe", input = paste("cd", getwd(), "&& convert -loop 0 cloud.gif"))
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png cloud.gif", sep="")
ImageMagick.code <- paste("convert -delay ", 3,
" -loop 0 frame*.png cloud.gif", sep="")
system(ImageMagick.code)
# Insert path to Geospatial data needed, and desired download location
FireH <- download.file("http://www.fs.fed.us/r3/gis/gisdata/Fire_History.zip",
"Directory.../Fire_History.zip")
# Insert path to Geospatial data needed, and desired download location
FireH <- download.file("http://www.fs.fed.us/r3/gis/gisdata/Fire_History.zip")
# Insert path to Geospatial data needed, and desired download location
FireH <- download.file("http://www.fs.fed.us/r3/gis/gisdata/Fire_History.zip")
# Insert path to Geospatial data needed, and desired download location
FireH <- download.file("http://www.fs.fed.us/r3/gis/gisdata/Fire_History.zip",
"C:/Documents/Fire_History.zip")
# Insert path to Geospatial data needed, and desired download location
FireH <- download.file("http://www.fs.fed.us/r3/gis/gisdata/Fire_History.zip",
"C:/Fire_History.zip")
# Insert path to Geospatial data needed, and desired download location
FireH <- download.file("http://www.fs.fed.us/r3/gis/gisdata/Fire_History.zip",
"C:/Users/Ryan/OneDrive/Documents/Fire_History.zip")
enabled for coding purposes,  for exdir insert desired file path for
geodatabase.
FireH2 <- unzip("C:/Users/Ryan/OneDrive/Documents/Fire_History.zip", overwrite = TRUE,
exdir = "C:/Users/Ryan/OneDrive/Documents")
# Assigning Geodatabase a name
FireHGDB <- "C:/Users/Ryan/OneDrive/Documents/Fire_History.gdb"
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read(FireHGDB, "FirePerimeter")
library(sf)
;library(tidyverse)
library(tidyverse)
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read(FireHGDB, "FirePerimeter")
#require_geomType="wkbPolygon")
SW_Fire_Occurrences <- st_read(FireHGDB, "FireOccurrence")
# Removes invalid naming characters
# https://www.journaldev.com/43690/sub-and-gsub-function-r#the-gsub-function-in-r
SW_Fire_Perimeters$FIRENAME <- gsub(" ", "_", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub(" ", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Perimeters$FIRENAME <- gsub("#", "_", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("#", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Perimeters$FIRENAME <- gsub("\\.", "", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("\\.", "", SW_Fire_Occurrences$FIRENAME)
# Removes NAs from fire occurrences UNIQFIREID column
SW_Fire_Occurrences <-
SW_Fire_Occurrences[!is.na(SW_Fire_Occurrences$UNIQFIREID),]
View(SW_Fire_Perimeters)
SW_Fire_Perimeters$UNIQFIREID
SW_Fire_Occurrences$UNIQFIREID
table(is.na(SW_Fire_Occurrences$UNIQFIREID))
table(is.na(SW_Fire_Perimeters$UNIQFIREID))
#require_geomType="wkbPolygon")
SW_Fire_Occurrences <- st_read(FireHGDB, "FireOccurrence")
SW_Fire_Occurrences$FIRENAME <- gsub(" ", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("#", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("\\.", "", SW_Fire_Occurrences$FIRENAME)
table(is.na(SW_Fire_Occurrences$UNIQFIREID))
# Removes NAs from fire occurrences UNIQFIREID column
SW_Fire_Occurrences <-
SW_Fire_Occurrences[!is.na(SW_Fire_Occurrences$UNIQFIREID),]
# Removes NAs from fire occurrences UNIQFIREID column
SW_Fire_Occurrences <-
SW_Fire_Occurrences[!is.na(SW_Fire_Occurrences$UNIQFIREID),]
table(is.na(SW_Fire_Occurrences$UNIQFIREID))
# Removes incomplete UNIQFIREIDs for fire occurrences
SW_Fire_Occurrences <- subset(SW_Fire_Occurrences,
nchar(as.character(UNIQFIREID)) == 17)
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read(FireHGDB, "FirePerimeter")
#require_geomType="wkbPolygon")
SW_Fire_Occurrences <- st_read(FireHGDB, "FireOccurrence")
# Removes invalid naming characters
# https://www.journaldev.com/43690/sub-and-gsub-function-r#the-gsub-function-in-r
SW_Fire_Perimeters$FIRENAME <- gsub(" ", "_", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub(" ", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Perimeters$FIRENAME <- gsub("#", "_", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("#", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Perimeters$FIRENAME <- gsub("\\.", "", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("\\.", "", SW_Fire_Occurrences$FIRENAME)
# Removes NAs from fire occurrences UNIQFIREID column
SW_Fire_Occurrences <-
SW_Fire_Occurrences[!is.na(SW_Fire_Occurrences$UNIQFIREID),]
# Removes incomplete UNIQFIREIDs for fire occurrences
SW_Fire_Occurrences <- subset(SW_Fire_Occurrences,
nchar(as.character(UNIQFIREID)) == 17)
SW_merge <- SW_Fire_Perimeters %>% left_join(SW_Fire_Occurrences)
SW_merge <- SW_Fire_Perimeters %>% st_join(SW_Fire_Occurrences)
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>% left_join(SW_Fire_Occurrences)
View(SW_merge)
table(is.na(SW_merge$UNIQFIREID))
table(is.na(SW_Fire_Perimeters$UNIQFIREID))
table(is.na(SW_Fire_Perimeters$FIRENAME))
table(is.na(SW_Fire_Perimeters$DISCOVERYDATETIME))
table(is.na(SW_Fire_Perimeters$TOTALACRES))
table(is.na(SW_Fire_Perimeters$FIRENAME))
as.data.frame(SW_Fire_Perimeters)
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>% left_join(SW_Fire_Occurrences, by = "FIRENAME")
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>% left_join(as.data.frame(SW_Fire_Occurrences), by = "FIRENAME")
SW_merge <- st_drop_geometry(SW_Fire_Perimeters) %>% left_join(st_drop_geometry(SW_Fire_Occurrences), by = "FIRENAME")
idx <- is.na(SW_Fire_Occurrences$UNIQFIREID)
SW_merge <- st_drop_geometry(SW_Fire_Perimeters) %>%
select(-UNIQFIREID) %>%
left_join(st_drop_geometry(SW_Fire_Occurrences), by = "FIRENAME")
memory.limit()
gc()
SW_merge <- st_drop_geometry(SW_Fire_Perimeters) %>%
select(-UNIQFIREID) %>%
left_join(st_drop_geometry(SW_Fire_Occurrences), by = "FIRENAME")
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read("C:/Users/Ryan/OneDrive/Documents/Fire_History/FirePerimeter")
library(sf)
library(tidyverse)
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read("C:/Users/Ryan/OneDrive/Documents/Fire_History/FirePerimeter")
# Assigning Geodatabase a name
FireHGDB <- "C:/Users/Ryan/OneDrive/Documents/Fire_History.gdb"
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read("C:/Users/Ryan/OneDrive/Documents/Fire_History/FirePerimeter")
# Brings Fire perimeters and occurrences out of GDB
SW_Fire_Perimeters <- st_read(FireHGDB,"FirePerimeter")
#require_geomType="wkbPolygon")
SW_Fire_Occurrences <- st_read(FireHGDB, "FireOccurrence")
gc()
# Removes invalid naming characters
# https://www.journaldev.com/43690/sub-and-gsub-function-r#the-gsub-function-in-r
SW_Fire_Perimeters$FIRENAME <- gsub(" ", "_", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub(" ", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Perimeters$FIRENAME <- gsub("#", "_", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("#", "_", SW_Fire_Occurrences$FIRENAME)
SW_Fire_Perimeters$FIRENAME <- gsub("\\.", "", SW_Fire_Perimeters$FIRENAME)
SW_Fire_Occurrences$FIRENAME <- gsub("\\.", "", SW_Fire_Occurrences$FIRENAME)
# Removes NAs from fire occurrences UNIQFIREID column
SW_Fire_Occurrences <-
SW_Fire_Occurrences[!is.na(SW_Fire_Occurrences$UNIQFIREID),]
# Removes incomplete UNIQFIREIDs for fire occurrences
SW_Fire_Occurrences <- subset(SW_Fire_Occurrences,
nchar(as.character(UNIQFIREID)) == 17)
SW_merge <- st_drop_geometry(SW_Fire_Perimeters) %>%
select(-UNIQFIREID) %>%
left_join(st_drop_geometry(SW_Fire_Occurrences), by = "FIRENAME")
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>%
select(-UNIQFIREID) %>%
left_join(as.data.frame(SW_Fire_Occurrences), by = "FIRENAME")
object.size(FireHGDB)
object.size(SW_Fire_Occurrences)
View(SW_Fire_Occurrences)
memory.limit()
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>%
select(-UNIQFIREID) %>%
left_join(as.data.frame(SW_Fire_Occurrences))
View(SW_merge)
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>%
select(-UNIQFIREID) %>%
left_join(st_drop_geometry(SW_Fire_Occurrences))
View(SW_merge)
table(is.na(SW_Fire_Occurrences$UNIQFIREID))
SW_merge <- as.data.frame(SW_Fire_Perimeters) %>%
full_join(st_drop_geometry(SW_Fire_Occurrences))
View(SW_merge)
View(SW_merge)
table(is.na(SW_merge$UNIQFIREID))
st_drop_geometry(SW_Fire_Occurrences)
as.data.frame(SW_Fire_Perimeters)
SW_merge <- SW_Fire_Perimeters %>%
st_join(SW_Fire_Occurrences,left = TRUE)
plot(SW_Fire_Perimeters)
SW_per <- st_cast(SW_Fire_Perimeters, "MULTIPOLYGON")
SW_merge <- SW_per %>%
st_join(SW_Fire_Occurrences,left = TRUE)
View(SW_merge)
SW_per$FIREOCCURID
table(is.na(SW_merge$UNIQFIREID.x))
table(is.na(SW_merge$UNIQFIREID.y))
SW_merge <- SW_per %>%
st_join(SW_Fire_Occurrences)
SW_merge <- merge(SW_per, SW_Fire_Occurrences, by = FIRENAME )
SW_merge <- merge(SW_per, as.data.frame(SW_Fire_Occurrences), by = FIRENAME )
SW_merge <- merge(SW_per, as.data.frame(SW_Fire_Occurrences), by = "FIRENAME" )
SW <- SW_merge %>% filter(!is.na(UNIQFIREID.y))
View(SW)
SW <- SW_merge[!duplicated(SW_merge$FIRENAME.x), ]
View(SW_Fire_Perimeters)
SW <- SW_merge[!duplicated(SW_merge$CN.x), ]
(2130-1)/(2130-1)
install.packages("C:/Users/Ryan/OneDrive/Desktop/spanner_1.0.zip", repos = NULL, type = "win.binary")
library(spanner)
LASfile <- system.file("extdata", "MixedConifer.laz", package="spanner")
library(spanner)
las <- readLAS(LASfile, select = "xyz0", filter = "-drop_z_below 0")
library(lidR)
las <- readLAS(LASfile, select = "xyz0", filter = "-drop_z_below 0")
install.packages("C:/Users/Ryan/OneDrive/Desktop/spanner_1_24.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Ryan/OneDrive/Desktop/spanner_1_24.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Ryan/OneDrive/Desktop/spanner_1.0.zip", repos = NULL, type = "win.binary")
LASfile <- system.file("extdata", "MixedConifer.laz", package="spanner")
library(spanner)
las <- readLAS(LASfile, select = "xyz0", filter = "-drop_z_below 0")
source('C:/Users/Ryan/OneDrive/Desktop/test.R', echo=TRUE)
LASfile <- system.file("extdata", "MixedConifer.laz", package="spanner")
las <- readLAS(LASfile, select = "xyz0", filter = "-drop_z_below 0")
set_lidr_threads(4)
temp1 <- spanner::C_count_in_disc(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 3, ncpu = 4)
temp2 <- spanner::C_count_in_sphere(las, radius = 3, ncpu = 4)
temp3 <- spanner::C_vert_in_sphere(las, radius = 3, ncpu = 4)
las@data$myVert<-temp3
plot(las@data$`Verticality (3)`~las@data$myVert)
plot(las, color="myVert")
plot(las, color="Verticality (3)")
parallel::detectCores(logical = FALSE)
m = spanner::C_count_in_disc(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 1)
t1 = Sys.time()
m = spanner::C_count_in_disc(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 1)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_count_in_disc(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 2)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_count_in_disc(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 4)
t2 = Sys.time()
t2-t1
head(m)
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 1)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 2)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 4)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 1)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 2)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 4)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 1)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 2)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las@data$X, las@data$Y, las@data$X, las@data$Y, radius = 10, ncpu = 4)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las, radius = 10, ncpu = 1)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las, radius = 10, ncpu = 2)
t2 = Sys.time()
t2-t1
t1 = Sys.time()
m = spanner::C_vert_in_sphere(las, radius = 10, ncpu = 4)
t2 = Sys.time()
t2-t1
library(treeLS)
library("TreeLS")
install.packages("TreeLS")
