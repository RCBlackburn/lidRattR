# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
# give each voxel a unique id and assign 0s and NAs where appropriate
fullvox <- fullvox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox$SVi[is.na(fullvox$SVi)] <- 0
null_list <- lapply(fullvox$Z_list,is.null)
fullvox$Z_list[do.call(rbind,null_list)] <- NA
fullvox$I_list[do.call(rbind,null_list)] <- NA
##### Individual voxel metrics
### FR_SVi is the frequency ratio of the number of returns in a voxel in relation to total returns (in Pearse et al. 2019 this is FR_Di)
fullvox <- fullvox %>% mutate(FR_SVi = SVi/sum(fullvox$SVi))
### P_Di is the number of returns below each voxel (Pearse et al. 2019; Kim et al. 2016 uses returns above)
# create a vector for Z in each iteration
Zi = fullvox$Z
# for loop to calculate points below each voxel
point_blow = list()
for(i in 1:length(unique(fullvox$Z))){
np_b <- fullvox %>%
group_by(X,Y) %>%
filter(Z < unique(Z)[i]) %>%
summarize(npoints_below = sum(SVi), Z= unique(Zi)[i])
point_blow[[i]] <- np_b
}
# extract point below data and merge using the voxel id
point_blow_all_vox <- do.call(rbind,point_blow)
point_blow_all_vox <- point_blow_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_blow_all_vox[,c(3,5)]), by = "id_xyz", )
### P_Di_above is the number of returns above each voxel (Kim et al. 2016 uses returns above as P_Di)
# for loop to calculate points below each voxel
point_above = list()
for(i in 1:length(unique(fullvox$Z))){
np_a <- fullvox %>%
group_by(X,Y) %>%
filter(Z > unique(Z)[i]) %>%
summarize(npoints_above = sum(SVi, na.rm = T), Z= unique(Zi)[i])
point_above[[i]] <- np_a
}
# extract point below data and merge using the voxel id
point_above_all_vox <- do.call(rbind,point_above)
point_above_all_vox <- point_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_above_all_vox[,c(3,5)]), by = "id_xyz", )
# NAs returned for 0 points so it is appropriate to replace them with 0
fullvox$npoints_above[is.na(fullvox$npoints_above)] <- 0
### FR_Di is the frequency ratio of the number of returns above a voxel in relation to total returns (Kim et al. 2016)
fullvox <- fullvox %>% mutate(FR_Di = npoints_above/sum(fullvox$SVi))
### I_Di is the median intensity of returns above each voxel
# for loop to calculate median intensity above each voxel
i_above = list()
for(i in 1:length(unique(fullvox$Z))){
i_a <- fullvox %>% filter(Z > Z[i])
i_a$I_list<- lapply( i_a$I_list, "length<-", max(lengths( i_a$I_list)))
i_abv <- as.data.frame(do.call(rbind, i_a$I_list))
i_a_merge <- cbind(as.data.frame(i_a), i_abv)
i_a_merge <- cbind(X = i_a_merge$X, Y = i_a_merge$Y, i_a_merge[,ncol(i_a)+1:(ncol(i_a_merge)-ncol(i_a))])
i_Di_mt <- i_a_merge %>% pivot_longer(cols = 3:ncol(i_a_merge)) %>%
group_by(X,Y) %>%
summarize(Z = unique(fullvox$Z)[i], i_Di = median(value, na.rm = T))
i_above[[i]] <- i_Di_mt
}
# extract point below data and merge using the voxel id
i_above_all_vox <- do.call(rbind,i_above)
i_above_all_vox <- i_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(i_above_all_vox[,c(4,5)]), by = "id_xyz" )
return(fullvox)
}
low %>% lasfilter(Classification == 1)
low_veg <- low %>% lasfilter(Classification == 1)
plot(low_veg)
std_voxel_all(low_veg, 5)
std_voxel_all(low_veg, 5)
vox <- lidR::voxel_metrics(low_veg, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
std_voxel_all(low_veg, 5)1
vox <- lidR::voxel_metrics(low_veg, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
plot(fullvox)
std_voxel_all <- function(las, resolution, vox_ht = max(vox$Z), vox_x = c(min(vox$X), max(vox$X)), vox_y = c(min(vox$X), max(vox$X))){
vox <- lidR::voxel_metrics(low_veg, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
# give each voxel a unique id and assign 0s and NAs where appropriate
fullvox <- fullvox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox$SVi[is.na(fullvox$SVi)] <- 0
null_list <- lapply(fullvox$Z_list,is.null)
fullvox$Z_list[do.call(rbind,null_list)] <- NA
fullvox$I_list[do.call(rbind,null_list)] <- NA
##### Individual voxel metrics
### FR_SVi is the frequency ratio of the number of returns in a voxel in relation to total returns (in Pearse et al. 2019 this is FR_Di)
fullvox <- fullvox %>% mutate(FR_SVi = SVi/sum(fullvox$SVi))
### P_Di is the number of returns below each voxel (Pearse et al. 2019; Kim et al. 2016 uses returns above)
# create a vector for Z in each iteration
Zi = fullvox$Z
# for loop to calculate points below each voxel
point_blow = list()
for(i in 1:length(unique(fullvox$Z))){
np_b <- fullvox %>%
group_by(X,Y) %>%
filter(Z < unique(Z)[i]) %>%
summarize(npoints_below = sum(SVi), Z= unique(Zi)[i])
point_blow[[i]] <- np_b
}
# extract point below data and merge using the voxel id
point_blow_all_vox <- do.call(rbind,point_blow)
point_blow_all_vox <- point_blow_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_blow_all_vox[,c(3,5)]), by = "id_xyz", )
### P_Di_above is the number of returns above each voxel (Kim et al. 2016 uses returns above as P_Di)
# for loop to calculate points below each voxel
point_above = list()
for(i in 1:length(unique(fullvox$Z))){
np_a <- fullvox %>%
group_by(X,Y) %>%
filter(Z > unique(Z)[i]) %>%
summarize(npoints_above = sum(SVi, na.rm = T), Z= unique(Zi)[i])
point_above[[i]] <- np_a
}
# extract point below data and merge using the voxel id
point_above_all_vox <- do.call(rbind,point_above)
point_above_all_vox <- point_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_above_all_vox[,c(3,5)]), by = "id_xyz", )
# NAs returned for 0 points so it is appropriate to replace them with 0
fullvox$npoints_above[is.na(fullvox$npoints_above)] <- 0
### FR_Di is the frequency ratio of the number of returns above a voxel in relation to total returns (Kim et al. 2016)
fullvox <- fullvox %>% mutate(FR_Di = npoints_above/sum(fullvox$SVi))
### I_Di is the median intensity of returns above each voxel
# for loop to calculate median intensity above each voxel
i_above = list()
for(i in 1:length(unique(fullvox$Z))){
i_a <- fullvox %>% filter(Z > Z[i])
i_a$I_list<- lapply( i_a$I_list, "length<-", max(lengths( i_a$I_list)))
i_abv <- as.data.frame(do.call(rbind, i_a$I_list))
i_a_merge <- cbind(as.data.frame(i_a), i_abv)
i_a_merge <- cbind(X = i_a_merge$X, Y = i_a_merge$Y, i_a_merge[,ncol(i_a)+1:(ncol(i_a_merge)-ncol(i_a))])
i_Di_mt <- i_a_merge %>% pivot_longer(cols = 3:ncol(i_a_merge)) %>%
group_by(X,Y) %>%
summarize(Z = unique(fullvox$Z)[i], i_Di = median(value, na.rm = T))
i_above[[i]] <- i_Di_mt
}
# extract point below data and merge using the voxel id
i_above_all_vox <- do.call(rbind,i_above)
i_above_all_vox <- i_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(i_above_all_vox[,c(4,5)]), by = "id_xyz" )
return(fullvox)
}
std_voxel_all <- function(las, resolution, vox_ht = max(vox$Z), vox_x = c(min(vox$X), max(vox$X)), vox_y = c(min(vox$X), max(vox$X))){
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
# give each voxel a unique id and assign 0s and NAs where appropriate
fullvox <- fullvox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox$SVi[is.na(fullvox$SVi)] <- 0
null_list <- lapply(fullvox$Z_list,is.null)
fullvox$Z_list[do.call(rbind,null_list)] <- NA
fullvox$I_list[do.call(rbind,null_list)] <- NA
##### Individual voxel metrics
### FR_SVi is the frequency ratio of the number of returns in a voxel in relation to total returns (in Pearse et al. 2019 this is FR_Di)
fullvox <- fullvox %>% mutate(FR_SVi = SVi/sum(fullvox$SVi))
### P_Di is the number of returns below each voxel (Pearse et al. 2019; Kim et al. 2016 uses returns above)
# create a vector for Z in each iteration
Zi = fullvox$Z
# for loop to calculate points below each voxel
point_blow = list()
for(i in 1:length(unique(fullvox$Z))){
np_b <- fullvox %>%
group_by(X,Y) %>%
filter(Z < unique(Z)[i]) %>%
summarize(npoints_below = sum(SVi), Z= unique(Zi)[i])
point_blow[[i]] <- np_b
}
# extract point below data and merge using the voxel id
point_blow_all_vox <- do.call(rbind,point_blow)
point_blow_all_vox <- point_blow_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_blow_all_vox[,c(3,5)]), by = "id_xyz", )
### P_Di_above is the number of returns above each voxel (Kim et al. 2016 uses returns above as P_Di)
# for loop to calculate points below each voxel
point_above = list()
for(i in 1:length(unique(fullvox$Z))){
np_a <- fullvox %>%
group_by(X,Y) %>%
filter(Z > unique(Z)[i]) %>%
summarize(npoints_above = sum(SVi, na.rm = T), Z= unique(Zi)[i])
point_above[[i]] <- np_a
}
# extract point below data and merge using the voxel id
point_above_all_vox <- do.call(rbind,point_above)
point_above_all_vox <- point_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_above_all_vox[,c(3,5)]), by = "id_xyz", )
# NAs returned for 0 points so it is appropriate to replace them with 0
fullvox$npoints_above[is.na(fullvox$npoints_above)] <- 0
### FR_Di is the frequency ratio of the number of returns above a voxel in relation to total returns (Kim et al. 2016)
fullvox <- fullvox %>% mutate(FR_Di = npoints_above/sum(fullvox$SVi))
### I_Di is the median intensity of returns above each voxel
# for loop to calculate median intensity above each voxel
i_above = list()
for(i in 1:length(unique(fullvox$Z))){
i_a <- fullvox %>% filter(Z > Z[i])
i_a$I_list<- lapply( i_a$I_list, "length<-", max(lengths( i_a$I_list)))
i_abv <- as.data.frame(do.call(rbind, i_a$I_list))
i_a_merge <- cbind(as.data.frame(i_a), i_abv)
i_a_merge <- cbind(X = i_a_merge$X, Y = i_a_merge$Y, i_a_merge[,ncol(i_a)+1:(ncol(i_a_merge)-ncol(i_a))])
i_Di_mt <- i_a_merge %>% pivot_longer(cols = 3:ncol(i_a_merge)) %>%
group_by(X,Y) %>%
summarize(Z = unique(fullvox$Z)[i], i_Di = median(value, na.rm = T))
i_above[[i]] <- i_Di_mt
}
# extract point below data and merge using the voxel id
i_above_all_vox <- do.call(rbind,i_above)
i_above_all_vox <- i_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(i_above_all_vox[,c(4,5)]), by = "id_xyz" )
return(fullvox)
}
vox_mt <- function(z, i)
{
metrics =list(
SVi = length(z), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(z),
mean_z_vox = mean(z),
var_z_vox = var(z),
sd_z_vox = sd(z),
cv_z_vox = sd(z)/mean(z),
IQR_z_vox = IQR(z),
skew_z_vox = e1071::skewness(z),
kurt_z_vox = e1071::kurtosis(z),
med_i_vox = median(i),
mean_i_vox = mean(i),
var_i_vox = var(i),
sd_i_vox = sd(i),
cv_i_vox = sd(i)/mean(i),
IQR_i_vox = IQR(i),
skew_i_vox = e1071::skewness(i),
kurt_i_vox = e1071::kurtosis(i),
Z_list = list(z),
I_list = list(as.numeric(i))
)
return(metrics)
}
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
std_voxel_all(med, 5)
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
lidR::voxel_metrics(med, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
lidR::voxel_metrics(med, func = vox_mt(Z, as.numeric(Intensity)), res 1)
lidR::voxel_metrics(med, func = vox_mt(Z, as.numeric(Intensity)), res =1)
vox <-  lidR::voxel_metrics(med, func = vox_mt(Z, as.numeric(Intensity)), res =1)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
vox_x = c(min(vox$X), max(vox$X))
vox_y = c(min(vox$X)
)
vox_ht = max(vox$Z)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
resolution = 1
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
resolution
vox_x
y = seq(vox_y[1], vox_y[2], resolution)
vox_y[1]
vox_y[2]
vox_y = c(min(vox$Y), max(vox$Y)
y = seq(vox_y[1], vox_y[2], resolution)
vox_y = c(min(vox$Y), max(vox$Y))
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
std_voxel_all <- function(las, resolution, vox_ht = max(vox$Z), vox_x = c(min(vox$X), max(vox$X)), vox_y = c(min(vox$Y), max(vox$Y))){
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(vox_x[1], vox_x[2], resolution)
y = seq(vox_y[1], vox_y[2], resolution)
z = seq(min(vox$Z), vox_ht, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
# give each voxel a unique id and assign 0s and NAs where appropriate
fullvox <- fullvox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox$SVi[is.na(fullvox$SVi)] <- 0
null_list <- lapply(fullvox$Z_list,is.null)
fullvox$Z_list[do.call(rbind,null_list)] <- NA
fullvox$I_list[do.call(rbind,null_list)] <- NA
##### Individual voxel metrics
### FR_SVi is the frequency ratio of the number of returns in a voxel in relation to total returns (in Pearse et al. 2019 this is FR_Di)
fullvox <- fullvox %>% mutate(FR_SVi = SVi/sum(fullvox$SVi))
### P_Di is the number of returns below each voxel (Pearse et al. 2019; Kim et al. 2016 uses returns above)
# create a vector for Z in each iteration
Zi = fullvox$Z
# for loop to calculate points below each voxel
point_blow = list()
for(i in 1:length(unique(fullvox$Z))){
np_b <- fullvox %>%
group_by(X,Y) %>%
filter(Z < unique(Z)[i]) %>%
summarize(npoints_below = sum(SVi), Z= unique(Zi)[i])
point_blow[[i]] <- np_b
}
# extract point below data and merge using the voxel id
point_blow_all_vox <- do.call(rbind,point_blow)
point_blow_all_vox <- point_blow_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_blow_all_vox[,c(3,5)]), by = "id_xyz", )
### P_Di_above is the number of returns above each voxel (Kim et al. 2016 uses returns above as P_Di)
# for loop to calculate points below each voxel
point_above = list()
for(i in 1:length(unique(fullvox$Z))){
np_a <- fullvox %>%
group_by(X,Y) %>%
filter(Z > unique(Z)[i]) %>%
summarize(npoints_above = sum(SVi, na.rm = T), Z= unique(Zi)[i])
point_above[[i]] <- np_a
}
# extract point below data and merge using the voxel id
point_above_all_vox <- do.call(rbind,point_above)
point_above_all_vox <- point_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_above_all_vox[,c(3,5)]), by = "id_xyz", )
# NAs returned for 0 points so it is appropriate to replace them with 0
fullvox$npoints_above[is.na(fullvox$npoints_above)] <- 0
### FR_Di is the frequency ratio of the number of returns above a voxel in relation to total returns (Kim et al. 2016)
fullvox <- fullvox %>% mutate(FR_Di = npoints_above/sum(fullvox$SVi))
### I_Di is the median intensity of returns above each voxel
# for loop to calculate median intensity above each voxel
i_above = list()
for(i in 1:length(unique(fullvox$Z))){
i_a <- fullvox %>% filter(Z > Z[i])
i_a$I_list<- lapply( i_a$I_list, "length<-", max(lengths( i_a$I_list)))
i_abv <- as.data.frame(do.call(rbind, i_a$I_list))
i_a_merge <- cbind(as.data.frame(i_a), i_abv)
i_a_merge <- cbind(X = i_a_merge$X, Y = i_a_merge$Y, i_a_merge[,ncol(i_a)+1:(ncol(i_a_merge)-ncol(i_a))])
i_Di_mt <- i_a_merge %>% pivot_longer(cols = 3:ncol(i_a_merge)) %>%
group_by(X,Y) %>%
summarize(Z = unique(fullvox$Z)[i], i_Di = median(value, na.rm = T))
i_above[[i]] <- i_Di_mt
}
# extract point below data and merge using the voxel id
i_above_all_vox <- do.call(rbind,i_above)
i_above_all_vox <- i_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(i_above_all_vox[,c(4,5)]), by = "id_xyz" )
return(fullvox)
}
med <- readLAS("viz/med_density.las")
med <- med %>% lasfilter(Classification == 1)
std_voxel_all(med, res = 1)
devtools::document()
devtoolsdocument()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#devtools::install_github("https://github.com/RCBlackburn/lidRmts", auth_token = " e9c9e7db5d5ff127b9f26359da5473b83897367f")
library(sf)
library(tidyverse)
library(lidR)
# library(doParallel)
# library(foreach)
library(lidRmts)
library(landscapemetrics)
path <- "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/"
# load in lidar catalog
ctg <- catalog(paste0(path,"norm_las/"))
# load in stem mapped data from the field to look at max crown radius
trees <- read.csv(paste0(path,"field_data/FUWI_2018_Updated_wTreeloc.csv"))
trees <- trees %>% filter(height.m > 1.37)
## create plot sf dataframe with true size and 20 m buffer
plot.sf <- st_as_sf(trees, coords = c("plot.x", "plot.y"), crs = paste0(ctg@proj4string))
plot.sf$plotID <- paste0(plot.sf$block, "--", plot.sf$treatment, "--", plot.sf$plot)
plot.sf <- plot.sf %>% group_by(plotID) %>% summarise(ntrees = n(), IQR_ht = IQR(height.m), block = mean(block), treatment = mean(treatment))
plot(ctg)
plot(plot.sf[,1],add = T)
low <- lasclip(ctg, plot.sf[plot.sf$plotID =="3--5--6",], radius = 11.34970)
vox_mt <- function(z, i, classification)
{ df <- cbind(z,i,classification)
metrics =list(
SVi = length(df$z[df$classification == 1]), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(z),
mean_z_vox = mean(z),
var_z_vox = var(z),
sd_z_vox = sd(z),
cv_z_vox = sd(z)/mean(z),
IQR_z_vox = IQR(z),
skew_z_vox = e1071::skewness(z),
kurt_z_vox = e1071::kurtosis(z),
med_i_vox = median(i),
mean_i_vox = mean(i),
var_i_vox = var(i),
sd_i_vox = sd(i),
cv_i_vox = sd(i)/mean(i),
IQR_i_vox = IQR(i),
skew_i_vox = e1071::skewness(i),
kurt_i_vox = e1071::kurtosis(i),
Z_list = list(z),
I_list = list(as.numeric(i))
)
return(metrics)
}
voxel_metrics(low, func = vox_mt(Z, as.numeric(Intensity), Classification), res = 5)
vox_mt <- function(z, i, classification)
{ df <- as.data.frame(cbind(z,i,classification))
metrics =list(
SVi = length(df$z[df$classification == 1]), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(z),
mean_z_vox = mean(z),
var_z_vox = var(z),
sd_z_vox = sd(z),
cv_z_vox = sd(z)/mean(z),
IQR_z_vox = IQR(z),
skew_z_vox = e1071::skewness(z),
kurt_z_vox = e1071::kurtosis(z),
med_i_vox = median(i),
mean_i_vox = mean(i),
var_i_vox = var(i),
sd_i_vox = sd(i),
cv_i_vox = sd(i)/mean(i),
IQR_i_vox = IQR(i),
skew_i_vox = e1071::skewness(i),
kurt_i_vox = e1071::kurtosis(i),
Z_list = list(z),
I_list = list(as.numeric(i))
)
return(metrics)
}
voxel_metrics(low, func = vox_mt(Z, as.numeric(Intensity), Classification), res = 5)
w.class <- voxel_metrics(low, func = vox_mt(Z, as.numeric(Intensity), Classification), res = 5)
vox_mt <- function(z, i, classification)
{ df <- as.data.frame(cbind(z,i,classification))
metrics =list(
SVi = length(z), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(z),
mean_z_vox = mean(z),
var_z_vox = var(z),
sd_z_vox = sd(z),
cv_z_vox = sd(z)/mean(z),
IQR_z_vox = IQR(z),
skew_z_vox = e1071::skewness(z),
kurt_z_vox = e1071::kurtosis(z),
med_i_vox = median(i),
mean_i_vox = mean(i),
var_i_vox = var(i),
sd_i_vox = sd(i),
cv_i_vox = sd(i)/mean(i),
IQR_i_vox = IQR(i),
skew_i_vox = e1071::skewness(i),
kurt_i_vox = e1071::kurtosis(i),
Z_list = list(z),
I_list = list(as.numeric(i))
)
return(metrics)
}
wo.class <- voxel_metrics(low, func = vox_mt(Z, as.numeric(Intensity), Classification), res = 5)
View(wo.class)
View(w.class)
vox_mt <- function(z, i, classification)
{ df <- as.data.frame(cbind(z,i,classification))
metrics =list(
SVi = length(df$z[df$classification == 1]), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(df$z[df$classification == 1]),
mean_z_vox = mean(df$z[df$classification == 1]),
var_z_vox = var(df$z[df$classification == 1]),
sd_z_vox = sd(df$z[df$classification == 1]),
cv_z_vox = sd(df$z[df$classification == 1])/mean(df$z[df$classification == 1]),
IQR_z_vox = IQR(df$z[df$classification == 1]),
skew_z_vox = e1071::skewness(df$z[df$classification == 1]),
kurt_z_vox = e1071::kurtosis(df$z[df$classification == 1]),
med_i_vox = median(df$i[df$classification == 1]),
mean_i_vox = mean(df$i[df$classification == 1]),
var_i_vox = var(df$i[df$classification == 1]),
sd_i_vox = sd(df$i[df$classification == 1]),
cv_i_vox = sd(df$i[df$classification == 1])/mean(df$i[df$classification == 1]),
IQR_i_vox = IQR(df$i[df$classification == 1]),
skew_i_vox = e1071::skewness(df$i[df$classification == 1]),
kurt_i_vox = e1071::kurtosis(df$i[df$classification == 1]),
Z_list = list(df$z[df$classification == 1]),
I_list = list(as.numeric(df$i[df$classification == 1]))
)
return(metrics)
}
w.class <- voxel_metrics(low, func = vox_mt(Z, as.numeric(Intensity), Classification), res = 5)
View(w.class)
devtools::document()
devtools::document()
View(w.class)
View(wo.class)
devtools::document()
