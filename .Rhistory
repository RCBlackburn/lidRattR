iaad = stats::mad(i, center = mean(i))
iskew = (sum((i - imean)^3)/npoints)/(sum((i - imean)^2)/npoints)^(3/2)
ikurt = npoints*sum((i - imean)^4)/(sum((i - imean)^2)^2)
ientropy = lidR::entropy(i)
# Intesity cumulative quantiles
icum = lapply(zquantiles, function(x) (sum(i[z <= x], na.rm = T)/itotal)*100)
names(icum) = paste0("icum_", names(icum))
# output
metrics = list(
npts = npoints,
zmax = zmax,
zmin = zmin,
zmode = zmode,
zmean = zmean,
zqmean = zqmean,
zsd = zsd,
zvar = zvar,
zcv = zcv,
zIQR = zIQR,
zaad = zaad,
zskew = zskew,
zkurt = zkurt,
zentropy = zentropy,
# L moments
zL1 = zL1,
zL2 = zL2,
zL3 = zL3,
zL4 = zL4,
zLskew = zLskew,
zLkurt = zLkurt,
itotal = itotal,
imax = imax,
imin = imin,
imode = imode,
imean = imean,
iqmean = iqmean,
isd = isd,
ivar = ivar,
icv = icv,
iIQR = iIQR,
iaad = iaad,
iskew = iskew,
ikurt = ikurt,
ientropy = ientropy,
pHtBin_5 = d5,
pHtBin_10 = d10,
pHtBin_15 = d15,
pHtBin_20 = d20,
pHtBin_25 = d25,
pHtBin_30 = d30,
pHtBin_35 = d35,
pHtBin_40 = d40,
pHtBin_45 = d45,
pHtBin_50 = d50,
pHtBin_55up = d55,
p2_1r =  prct_2_1r,
p10_1r = prct_10_1r,
p20_1r = pcrt_20_1r,
pab_mean_1r = prct_1r_ab_mean,
pab_mode_1r =  prct_1r_ab_mode,
p2 =  pcrt_2,
p10 = pcrt_10,
p20 = pcrt_20,
pab_mean = prct_ab_mean,
pab_mode = prct_ab_mode
)
return(c(metrics, per_RN, zquantiles, d, dcum, icum))
}
#devtools::install_github("https://github.com/RCBlackburn/lidRmts", auth_token = " e9c9e7db5d5ff127b9f26359da5473b83897367f")
library(sf)
library(lidR)
library(dplyr)
path <- "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/"
# load in lidar catalog
ctg <- catalog(paste0(path,"norm_las/"))
# load in stem mapped data from the field to look at max crown radius
trees <- read.csv(paste0(path,"field_data/FUWI_2018_Updated_wTreeloc.csv"))
trees <- trees %>% filter(height.m > 1.37)
## create plot sf dataframe with true size and 20 m buffer
plot.sf <- st_as_sf(trees, coords = c("plot.x", "plot.y"), crs = paste0(ctg@proj4string))
plot.sf$plotID <- paste0(plot.sf$block, "--", plot.sf$treatment, "--", plot.sf$plot)
plot.sf <- plot.sf %>% group_by(plotID) %>% summarise(ntrees = n(), IQR_ht = IQR(height.m), block = mean(block), treatment = mean(treatment))
plot(ctg)
plot(plot.sf[,1],add = T)
low <- lasclip(ctg, plot.sf[plot.sf$plotID =="3--5--6",], radius = 11.34970)
low <- low %>% lasfilter(Classification == 1)
low.plot <- subset(plot.sf, plotID =="3--5--6")
low.poly <- st_buffer(low.plot, 11.34970)
med <- lasclip(ctg, plot.sf[plot.sf$plotID =="2--1--16",], radius = 11.34970)
med <- med %>% lasfilter(Classification == 1)
med <- med %>% lasfilter(Z < 5)
med.plot <- subset(plot.sf, plotID =="2--1--16")
med.poly <- st_buffer(med.plot, 11.34970)
plot(med)
high <- lasclip(ctg, plot.sf[plot.sf$plotID =="1--1--2",], radius = 11.34970)
high <- high %>% lasfilter(Classification == 1)
high <- lasclip(ctg, plot.sf[plot.sf$plotID =="1--1--2",], radius = 11.34970)
plot(high)
plot(high, color = viridis::inferno())
plot(high, color = viridis::inferno(10))
plot(high, colorPalette = viridis::inferno(10))
plot(high, colorPalette = viridis::inferno(10, end = .8))
plot(high, colorPalette = viridis::inferno(10, begin = .1))
plot(high, colorPalette = viridis::inferno(10, begin = .2))
plot(high, colorPalette = viridis::inferno(10, begin = .15))
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 10)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 7)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 7, legend = TRUE)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axsis = TRUE)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
x <- 1:10
y <- 1:10
z <- matrix(outer(x - 5, y - 5) + rnorm(100), 10, 10)
open3d()
library(rgl)
x <- 1:10
y <- 1:10
z <- matrix(outer(x - 5, y - 5) + rnorm(100), 10, 10)
open3d()
persp3d(x, y, z, col = "red", alpha = 0.7, aspect = c(1, 1, 0.5))
grid3d(c("x", "y+", "z"))
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3d(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3d(high@data$X,high@data$Y, high@data$Z, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3d(high@data$X,high@data$Y, high@data$Z, col = height, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3d(high@data$X,high@data$Y, high@data$Z, col = high@data$Z, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3d(high@data$X,high@data$Y, high@data$Z, col = abs(high@data$Z), colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot(high, col = high@data$Z, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3D::box3D(x0 = runif(3), y0 = runif(3), z0 = runif(3),
x1 = runif(3), y1 = runif(3), z1 = runif(3),
col = c("red", "lightblue", "orange"), alpha = 0.5,
border = "black", lwd = 2)
vox <- lidR::voxel_metrics(high, func = mean(Z), res = 1)
x = seq(min(vox$X), max(vox$X), resolution)
y = seq(min(vox$Y), max(vox$Y), resolution)
x = seq(min(vox$X), max(vox$X), 1)
y = seq(min(vox$Y), max(vox$Y), 1)
z = seq(min(vox$Z), max_z, 1)
z = seq(min(vox$Z), 45, 1)
plot3d(x,y,z)
all_vox = expand.grid(X = x, Y = y, Z = z)
plot3d(allvox$X,allvox$Y,allvox$Z)
plot3d(all_vox$X,all_vox$Y,all_vox$Z)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, type = l)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, type = "l")
vox <- lidR::voxel_metrics(high, func = mean(Z), res = 5)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
all_vox = expand.grid(X = x, Y = y, Z = z)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, type = "l")
x <- 1:10
y <- 1:10
z <- matrix(outer(x - 5, y - 5) + rnorm(100), 10, 10)
open3d()
persp3d(x, y, z, col = "red", alpha = 0.7, aspect = c(1, 1, 0.5))
grid3d(c("x", "y+", "z"))
open3d()
persp3d(x, y, z, col = "red", alpha = 0.7, aspect = c(1, 1, 0.5))
grid3d(c("x", "y", "z"))
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
all_vox = expand.grid(X = x, Y = y, Z = z)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, type = "l")
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "white" type = "l")
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "white", type = "l")
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, legend = TRUE, axis = TRUE)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "white", type = "l", add = T)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "white", type = "l", add = T)
vox <- lidR::voxel_metrics(high, func = mean(Z), res = 5)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
all_vox = expand.grid(X = x, Y = y, Z = z)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "white", type = "l", add = T)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "white", type = "l", add = T)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "black", type = "l", add = T)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "black", type = "l", add = T)
plot(all_vox)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6)
plot(vox)
plot3d(all_vox$X,all_vox$Y,all_vox$Z, col = "black", type = "l", add = T)
data.table::setDT(all_vox)
data.table::setDT(all_vox)
plot(all_vox)
vox <- lidR::voxel_metrics(high, func = mean(Z), res = 5)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
plot(all_vox)
plot3d(all_vox)
rm(rgl)
detach("package:rgl", unload = TRUE)
plot(all_vox)
lidr::plot(all_vox)
lidR::plot(all_vox)
lidR::plot(all_vox)
lidR::plot(all_vox)
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
fullvox <- as.data.frame(fullvox)
lidR::plot(all_vox)
lidR::plot(fullvox)
vox <- lidR::voxel_metrics(high, func = mean(Z), res = 5)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
fullvox <- as.data.frame(fullvox)
lidR::plot(fullvox)
rgl::plot3D(fullvox$X, fullvox$Y, fullvox$Z)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6)
library(sf)
library(lidR)
library(dplyr)
path <- "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/"
# load in lidar catalog
ctg <- catalog(paste0(path,"norm_las/"))
# load in stem mapped data from the field to look at max crown radius
trees <- read.csv(paste0(path,"field_data/FUWI_2018_Updated_wTreeloc.csv"))
trees <- trees %>% filter(height.m > 1.37)
## create plot sf dataframe with true size and 20 m buffer
plot.sf <- st_as_sf(trees, coords = c("plot.x", "plot.y"), crs = paste0(ctg@proj4string))
plot.sf$plotID <- paste0(plot.sf$block, "--", plot.sf$treatment, "--", plot.sf$plot)
plot.sf <- plot.sf %>% group_by(plotID) %>% summarise(ntrees = n(), IQR_ht = IQR(height.m), block = mean(block), treatment = mean(treatment))
plot(ctg)
plot(plot.sf[,1],add = T)
low <- lasclip(ctg, plot.sf[plot.sf$plotID =="3--5--6",], radius = 11.34970)
low <- low %>% lasfilter(Classification == 1)
low.plot <- subset(plot.sf, plotID =="3--5--6")
low.poly <- st_buffer(low.plot, 11.34970)
med <- lasclip(ctg, plot.sf[plot.sf$plotID =="2--1--16",], radius = 11.34970)
med <- med %>% lasfilter(Classification == 1)
med <- med %>% lasfilter(Z < 5)
med.plot <- subset(plot.sf, plotID =="2--1--16")
med.poly <- st_buffer(med.plot, 11.34970)
high <- lasclip(ctg, plot.sf[plot.sf$plotID =="1--1--2",], radius = 11.34970)
high <- high %>% lasfilter(Classification == 1)
high <- lasclip(ctg, plot.sf[plot.sf$plotID =="1--1--2",], radius = 11.34970)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6)
vox <- lidR::voxel_metrics(high, func = mean(Z), res = 5)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
fullvox <- as.data.frame(fullvox)
lidR::plot(fullvox)
rgl::plot3D(fullvox$X, fullvox$Y, fullvox$Z)
rgl::plot3d(fullvox$X, fullvox$Y, fullvox$Z)
rgl::plot3d(fullvox$X, fullvox$Y, fullvox$Z, type = "l")
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6)
rgl::grid3d()
rgl::grid3d(c(x,y,z))
rgl::grid3d(c("x","y","z"))
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, axsis = T)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, axis = T)
rgl::grid3d(c("x","y","z"))
rgl::grid3d(c("x","y","z"), at = c("x","y","z") )
rgl::grid3d(c("x","y","z") )
rgl::grid3d(c("x","y","z"), at = c(x,y,z) )
rgl::grid3d(c("x","y","z"), at = x )
rgl::grid3d(c("x","y","z"), at = x )
rgl::grid3d(c("x","y","z"))
rgl::grid3d(c("x","y","-z"))
rgl::grid3d(c("x","y","+z"))
rgl::grid3d(c("+x","+y","+z"))
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, axis = T)
rgl::grid3d(c("+x","+y","+z"))
rgl::grid3d(c("x","y","z"))
x.5 = seq(min(vox$X)+5, max(vox$X), 5)
y.5 = seq(min(vox$Y)+5, max(vox$Y), 5)
z.5 = seq(min(vox$Z)+5, 45, 5)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, axis = T)
x = seq(min(vox$X), max(vox$X), 5)
y = seq(min(vox$Y), max(vox$Y), 5)
z = seq(min(vox$Z), 45, 5)
rgl::grid3d(c("x","y","z"))
x.5 = seq(min(vox$X)+5, max(vox$X), 5)
y.5 = seq(min(vox$Y)+5, max(vox$Y), 5)
z.5 = seq(min(vox$Z)+5, 45, 5)
rgl::grid3d(c("x.5","y.5","z.5"))
x.5 = seq(min(vox$X)+5, max(vox$X) + 5, 5)
y.5 = seq(min(vox$Y)+5, max(vox$Y) + 5, 5)
z.5 = seq(min(vox$Z)+5, 45, 5)
rgl::grid3d(c("x.5","y.5","z.5"))
z.5 = seq(min(vox$Z)+10, 45, 5)
rgl::grid3d(c("x.5","y.5","z.5"))
data.table::setDT(all_vox)
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
fullvox <- as.data.frame(fullvox)
plot(high, colorPalette = viridis::inferno(10, begin = .15), size = 6, axis = T)
rgl::grid3d(c("x","y","z"))
chm <- grid_canopy(high, 0.25, pitfree(c(0,2,5,10,15), c(0,1), subcircle = 0.2))
lastrees(high, watershed(chm))
las.tree <- lastrees(high, watershed(chm))
plot(las.tree)
plot(las.tree, size = 6, axis = T, col = treeID, colorPalette = viridis::inferno(10, begin = .15))
plot(las.tree, size = 6, axis = T, col = "treeID", colorPalette = viridis::inferno(10, begin = .15))
plot(las.tree, size = 6, axis = T, col = "treeID", colorPalette = viridis::inferno(10, begin = .15))
fri_ph1_FVS_out <- read.csv("All_Response_metric_update.csv")
fri_ph1_FVS_out <- fri_ph1_FVS_out %>% filter(Site == "4FRI_Ph1")
fri_ph1_sf <- read_sf("vectors/All_lidar_plots_0.1ac.shp")
library(tidyverse)
library(lidR)
library(lidRmts)
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
high <- readLAS("viz/high_density.las")
plot(med)
plot(med, colorPalette = viridis::magma(10))
plot(med, colorPalette = viridis::magma(10, begin = .2))
plot(med, colorPalette = viridis::magma(10, begin = .3))
plot(med, colorPalette = viridis::magma(10, begin = .3), size = 5)
library(tidyverse)
library(lidR)
library(lidRmts)
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
high <- readLAS("viz/high_density.las")
plot(med)
plot(med, colorPalette = viridis::magma())
plot(med, colorPalette = viridis::magma(n=50))
plot(med, colorPalette = viridis::magma(n=50, begin = .2))
plot(med, colorPalette = viridis::magma(n=50, begin = .3))
plot(med, colorPalette = viridis::magma(n=50), bg = "white" )
plot(low, colorPalette = viridis::magma(n=50), bg = "white")
high <- readLAS("viz/high_density.las")
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
library(tidyverse)
library(lidR)
library(lidRmts)
low <- readLAS("viz/low_density.las")
med <- readLAS("viz/med_density.las")
vox_mt <- function(z, i)
{
metrics =list(
SVi = length(z), # number of points in a voxel (notation from Pearse et al. 2019)
med_z_vox = median(z),
mean_z_vox = mean(z),
var_z_vox = var(z),
sd_z_vox = sd(z),
cv_z_vox = sd(z)/mean(z),
IQR_z_vox = IQR(z),
skew_z_vox = (sum((z - mean(z))^3)/length(z))/(sum((z - mean(z))^2)/length(z))^(3/2),
kurt_z_vox = length(z)*sum((z - mean(z))^4)/(sum((z- mean(z))^2)^2),
med_i_vox = median(i),
mean_i_vox = mean(i),
var_i_vox = var(i),
sd_i_vox = sd(i),
cv_i_vox = sd(i)/mean(i),
IQR_i_vox = IQR(i),
skew_i_vox = (sum((i - mean(i))^3)/length(z))/(sum((i - mean(i))^2)/length(z))^(3/2),
kurt_i_vox = length(z)*sum((i - mean(i))^4)/(sum((i- mean(i))^2)^2),
Z_list = list(z),
I_list = list(as.numeric(i))
)
return(metrics)
}
las = med
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
resolution = 1
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(min(vox$X), max(vox$X), resolution)
y = seq(min(vox$Y), max(vox$Y), resolution)
z = seq(min(vox$Z), max_z, resolution)
max_z = 40
all_vox = expand.grid(X = x, Y = y, Z = z)
z = seq(min(vox$Z), max_z, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
plot(all_vox)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
plot(full_vox)
plot(fullvox)
resolution = 5
vox <- lidR::voxel_metrics(las, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(min(vox$X), max(vox$X), resolution)
y = seq(min(vox$Y), max(vox$Y), resolution)
z = seq(min(vox$Z), max_z, resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
plot(full_vox)
plot(fullvox)
knitr::opts_chunk$set(echo = TRUE)
las <- readLAS("viz/viz.las")
library(lidR)
las <- readLAS("viz/viz.las")
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
rgl::grid3d(c("x", "y+", "z"))
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
library(rgl)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
rgl::grid3d(c("x", "y+", "z"))
install.packages("knitr")
install.packages("knitr")
library(lidR)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
```{r, echo = FALSE, webgl = TRUE}
las <- readLAS("viz/viz.las")
plotids <- with(las, plot3d(las@data$X, las@data$Y, las@data$Z,
type="s", col=as.numeric(Species)))
plotids <- with(las, plot3d(las@data$X, las@data$Y, las@data$Z,
type="s", col=as.numeric(Z)))
plotids <- with(las@data, plot3d(las@data$X, las@data$Y, las@data$Z,
type="s", col=as.numeric(Z)))
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
plot3d() i
plot3d()
library(lidR)
library(rgl)
las <- readLAS("viz/viz.las")
dat <- las@data
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=as.numeric(Z)))
min(dat$Z)
dat[dat$z < 0]$Z <- 0
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=as.numeric(Z)))
min(dat$Z)
dat[dat$z < 0]$Z
dat[dat$z < 0]$Z
dat[dat$z < 0]
dat$z < 0
View(dat)
dat[dat$Z < 0]$Z <- 0
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=as.numeric(Z)))
View(dat)
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z))
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z))
dat[dat$Z =< 0]$Z <- 0.00001
dat[dat$Z <= 0]$Z <- 0.00001
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z))
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z, size = 1))
plotids <- with(dat, plot3d(X,Y,Z,
type="s", col=Z, size = 1,colorPalette = viridis::magma(n = 50)))
las <- readLAS("viz/viz.las")
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 3, axis = T)
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 3, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
grid3d(c("x", "y+", "z"))
rgl::movie3d( rgl::spin3d(), duration = 10, movie = "anglr", dir = dir)
play3d(spin3d(), duration = 12 )
### cloud diagram
plot(las, colorPalette = viridis::magma(n = 50), bg = "white", size = 8, axis = T)
cy.mat <-  cbind(11.34, 11.34, 1.37:25)
cy.mat.p <-  cbind(11.34, 11.34, 15:25)
shade3d(cylinder3d(cy.mat , radius = 11.34, side = 100),col="#B63679FF", alpha = .2)
rgl::grid3d(c("x", "y+", "z"))
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
dir = "~/Desktop",
type = "gif",
clean = TRUE
)
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
type = "gif",
clean = TRUE
)
movie3d(
movie="3dAnimatedScatterplot",
spin3d(),
duration = 10,
type = "gif",
clean = TRUE
)
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
type = "gif",
clean = TRUE
)
