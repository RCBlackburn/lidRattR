registerDoParallel(cl)
# Check properties
getDoParRegistered()
getDoParWorkers()
mt <- foreach(i =1:nrow(plot.sf),.packages = c("lidR","lidRmts", "sf", "landscapemetrics","tidyverse" ), .verbose = TRUE) %dopar%
{
mts <- data.frame(PlotID = plot.sf[i,]$plotID, block = as.character(plot.sf[i,]$block),
treatment = as.character(plot.sf[i,]$treatment), true_ntree = plot.sf[i,]$ntrees)
las.t <- lasclip(ctg, plot.sf[i,], radius = 11.34970)
if (is.null(las.t)) return(NULL)
las.veg <- las.t %>% lasfilter(Classification == 1)
# calculate cloud metrics
las.cloud <- las.t %>%  lasfilter(Z >= 1.37)
cld_mt <- as.data.frame(cloud_metrics(las.cloud, std_cloud(X, Y, Z, ReturnNumber)))
# calculate ITD metrics
chm <- grid_canopy(las.t, 0.25, pitfree(c(0,2,5,10,15), c(0,1), subcircle = 0.2))
trees <- lastrees(las.veg, watershed(chm, th_tree = 1.37))
# if (is.na(trees@data$treeID)) return(NULL)
trees <- tree_metrics(trees, func = .stdtreemetrics )
trees <- sf::st_as_sf(trees)
trees_mt <-std_trees(trees)
voxel_mt <- std_voxel(las.veg, 1)
chm[chm < 1.37] <- 0
chm[chm >= 1.37] <- 1
lan_m <- calculate_lsm(chm, level = c("class"))
lan_m_plot <- lan_m %>% filter(class == 1) %>% pivot_wider(names_from = metric, values_from = value)
mts_right <- cbind(lan_m_plot, cld_mt, trees_mt, voxel_mt)
mts <- cbind(mts,mts_right)
}
stopCluster(cl)
df<- do.call(rbind,mt)
View(df)
ggplot(df) + geom_histogram(aes(x = ENL_d2))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(df) + geom_histogram(aes(x = contig))
ggplot(df) + geom_histogram(aes(x = contig_mn))
ggplot(df) + geom_histogram(aes(x = contig_mn), bins = 1)
ggplot(df) + geom_histogram(aes(x = contig_mn), bins = 10)
ggplot(df) + geom_histogram(aes(x = contig_mn), bins = 15)
ggplot(df) + geom_histogram(aes(x = treatment, y =  contig_mn), bins = 15)
ggplot(df) + geom_boxplot(aes(x = treatment, y =  contig_mn), bins = 15)
ggplot(df) + geom_boxplot(aes(x = treatment, y =  division))
list_lsm()
table <- list_lsm()
View(table)
ggplot(df) + geom_boxplot(aes(x = treatment, y =  enn_mn))
ggplot(df) + geom_boxplot(aes(x = treatment, y =  np))
ggplot(df) + geom_boxplot(aes(x = treatment, y =  ai))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pladj))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	mesh))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	true_ntrees))
View(df)
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	true_ntree))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	FR_Di_mean))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	FR_Di_sd))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	FR_Di_skew))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	FR_Di_kurt))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	FR_Di_var))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	FR_Di_mean))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(df) + geom_histogram(aes(x = ENL_d2))
ggplot(df) + geom_histogram(aes(x = true_ntree))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(df) + geom_histogram(aes(x = pcc))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	`HB-4`))
ggplot(df) + geom_histogram(aes(x = `HB-4`))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	`HB-3`))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	`HB-4`))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	`HB-3`))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	`HB-5`))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(df) + geom_histogram(aes(x = pcc))
ggplot(df) + geom_histogram(aes(x = ENL_d2))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(df) + geom_histogram(aes(x = pcc))
ggplot(df) + geom_histogram(aes(x = ENL_d2))
plot(df$division, df$ENL_d2)
plot(df$pcc, df$division)
plot(df$ENL_d2, df$pcc)
cor(cbind(df$pcc, df$ENL_d2, df$division))
cor(cbind(df$pcc, df$ENL_d2, df$true_ntree)
cor(cbind(df$pcc, df$ENL_d2, df$true_ntree))
cor(cbind(df$pcc, df$ENL_d2, df$true_ntree))
cor(cbind(df$division, df$ENL_d2, df$true_ntree))
df %>% group_by(true_ntree, division, pcc)
df %>% group_by(true_ntree, division, pcc) %>% sample_n(27)
df %>% group_by(true_ntree, division, pcc)
df %>% group_by(true_ntree, division, pcc) %>% sample_n(3)
df %>% group_by(true_ntree, division, pcc) %>% sample_n(1)
df %>% group_by(true_ntree, division, pcc) %>% sample_n(.3)
install.packages("splitstackshape")
library(splitstackshape)
stratified(df, c("true_ntree", "division", "pcc"), 30)
stratified(df, c("true_ntree", "division", "pcc"), 27)
test < -stratified(df, c("true_ntree", "division", "pcc"), 27)
test <-stratified(df, c("true_ntree", "division", "pcc"), 27)
View(test)
test <-stratified(df, c("true_ntree", "division", "pcc"), 9)
test <-stratified(df, c("true_ntree", "division", "pcc"), 1)
test <-stratified(df, c("true_ntree", "division", "pcc"), 30)
ggplot(df) + geom_histogram(aes(x = division))
df %>% group_by(true_ntree, division, pcc) %>% summarize(med_div = med(division), Q95_div = quantile(divsion, .95))
df %>% group_by(true_ntree, division, pcc) %>% summarize(med_div = median(division), Q95_div = quantile(divsion, .95))
df %>% group_by(true_ntree, division, pcc) %>% summarize(med_div = median(division))#, Q95_div = quantile(divsion, .95))
test <- df %>% group_by(true_ntree, division, pcc) %>% summarize(med_div = median(division))#, Q95_div = quantile(divsion, .95))
View(test)
test <- df %>% group_by(division) %>% summarize(med_div = median(division))#, Q95_div = quantile(divsion, .95))
View(test)
df[which(median(df$division))]
df[which(df$division == median(df$division))]
which(df$division == median(df$division))
df[which(df$division == median(df$division)),]
div_med <- df[which(df$division == median(df$division)),]
View(div_med)
cut(df$division,
cut(df$division, breaks = quantile(df$division, c(0.25, 0.5, 0.75)),
labels = c("low", "mid", "high"),
right  = FALSE, include.lowest = TRUE)
test <- cut(df$division, breaks = quantile(df$division, c(0.25, 0.5, 0.75)),
labels = c("low", "mid", "high"),
right  = FALSE, include.lowest = TRUE)
test <- cut(df$division, breaks = quantile(df$division, c(0.25, 0.5, 0.75)),
labels = c("low", "mid", "high"),
right  = FALSE, include.lowest = TRUE)
test <- cut(df$division, breaks = quantile(df$division, c(0.25, 0.5, 0.75)),
labels = c("low", "mid", "high", "higher"),
right  = FALSE, include.lowest = TRUE)
test <- cut(df$division, breaks = quantile(df$division, c(0.25, 0.5, 0.75)))#,
test
test <- cut(df$division, breaks = quantile(df$division, c(0,0.25, 0.5, 0.75, 1)),
labels = c("low", "mid", "high", "higher"),
right  = FALSE, include.lowest = TRUE)
test
test <- cut(df$division, breaks = quantile(df$division, c(0,0.25, 0.5, 0.75, 1)))#,
test
table(unique(test))
table(test)
df$div_group <- cut(df$division, breaks = quantile(df$division, c(0,0.25, 0.5, 0.75, 1)))
df$pcc_group <- cut(df$pcc, breaks = quantile(df$pcc, c(0,0.25, 0.5, 0.75, 1)))
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.25, 0.5, 0.75, 1)))
stratified(df, c("div_group","pcc_group", "ENL_d2_group"))
stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 27)
stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 3)
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 3)
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
View(test)
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(df) + geom_histogram(aes(x = pcc))
ggplot(df) + geom_histogram(aes(x = ENL_d2))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(df) + geom_histogram(aes(x = pcc))
ggplot(df) + geom_histogram(aes(x = ENL_d2))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
sample  <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
test$PlotID
View(plot.sf)
plot.sf %>% filter(PlotID == test$PlotID)
plot.sf %>% filter(plotID == test$PlotID)
View(plot.sf)
plot.sf[which(plotID == test$PlotID)),]
plot.sf[which(plotID == test$PlotID),]
plot.sf[which(plots.sf$plotID == test$PlotID),]
plot.sf[which(plot.sf$plotID == test$PlotID),]
plot.sf[plot.sf$plotID %in% test$PlotID]
plot.sf[plot.sf$plotID %in% test$PlotID,]
plot.sample <- plot.sf[plot.sf$plotID %in% test$PlotID,]
plot(plot.sample)
st_write(plot.sample, "FUWI_MLS_plots.shp")
st_write(plot.sample, "C:/USers/Ryan/OneDrive/Documents/Projects/FUWI/vectors/FUWI_MLS_plots.shp")
st_write(plot.sample, "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/vectors/FUWI_MLS_plots.shp")
st_write(plot.sample, "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/site_vectors/FUWI_MLS_plots.shp")
plot.sample <- cbind(plot.sample, div = test$divison, pcc = test$pcc, ENL_d2 = test$ENL_d2)
test$divison
plot.sample <- cbind(plot.sample, div = test$division, pcc = test$pcc, ENL_d2 = test$ENL_d2)
View(plot.sample)
plot(plot.sample)
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
plot.sample <- plot.sf[plot.sf$plotID %in% test$PlotID,]
plot.sample <- cbind(plot.sample, div = test$division, pcc = test$pcc, ENL_d2 = test$ENL_d2)
plot(plot.sample)
st_write(plot.sample, "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/site_vectors/FUWI_MLS_plots.shp")
st_write(plot.sample, "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/site_vectors/FUWI_MLS_plots.shp", delete_layer = TRUE)
View(test)
unique(div_group)
unique(test$div_group)
100/3
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.33, 0.66, 1)))
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
set.seed = 451
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.25, 0.5, 0.75, 1)))
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
plot.sample <- plot.sf[plot.sf$plotID %in% test$PlotID,]
plot.sample <- cbind(plot.sample, div = test$division, pcc = test$pcc, ENL_d2 = test$ENL_d2)
plot(plot.sample)
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.33, 0.66, 1)))
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(df) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(df) + geom_histogram(aes(x = ENL_d2))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
plot.sample <- plot.sf[plot.sf$plotID %in% test$PlotID,]
plot.sample <- cbind(plot.sample, div = test$division, pcc = test$pcc, ENL_d2 = test$ENL_d2)
plot(plot.sample)
st_write(plot.sample, "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/site_vectors/FUWI_MLS_plots.shp", delete_layer = TRUE)
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 9)
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.25, 0.5, 0.75, 1)))
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
table(test$div_group)
table(test$pcc_group)
table(test$ENL_d2_group)
table(df$ENL_d2_group)
12/3
12/4
View(test)
View(plot.sample)
View(df)
df$div_group <- cut(df$division, breaks = quantile(df$division, c(0,0.25, 0.5, 0.75, 1)), labels = "lowest", "low", "high", "highest")
df$div_group <- cut(df$division, breaks = quantile(df$division, c(0,0.25, 0.5, 0.75, 1)),
labels = c("lowest", "low", "high", "highest"))
df$pcc_group <- cut(df$pcc, breaks = quantile(df$pcc, c(0,0.25, 0.5, 0.75, 1)),
labels = c("lowest", "low", "high", "highest"))
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.25, 0.5, 0.75, 1)),,
labels = c("lowest", "low", "high", "highest"))
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.25, 0.5, 0.75, 1)),
labels = c("lowest", "low", "high", "highest"))
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	pcc))
ggplot(test) + geom_boxplot(aes(x = treatment, y = 	ENL_d2))
ggplot(test) + geom_histogram(aes(x = division))
ggplot(test) + geom_histogram(aes(x = pcc))
ggplot(test) + geom_histogram(aes(x = ENL_d2))
plot.sample <- plot.sf[plot.sf$plotID %in% test$PlotID,]
plot.sample <- cbind(plot.sample, div = test$division, pcc = test$pcc, ENL_d2 = test$ENL_d2)
plot(plot.sample)
st_write(plot.sample, "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/site_vectors/FUWI_MLS_plots.shp", delete_layer = T)
View(test)
#devtools::install_github("https://github.com/RCBlackburn/lidRmts", auth_token = " e9c9e7db5d5ff127b9f26359da5473b83897367f")
library(sf)
library(tidyverse)
library(lidR)
library(doParallel)
library(foreach)
library(lidRmts)
library(landscapemetrics)
path <- "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/"
# load in lidar catalog
ctg <- catalog(paste0(path,"norm_las/"))
# load in stem mapped data from the field to look at max crown radius
trees <- read.csv(paste0(path,"field_data/FUWI_2018_Updated_wTreeloc.csv"))
trees <- trees %>% filter(height.m > 1.37)
#devtools::install_github("https://github.com/RCBlackburn/lidRmts", auth_token = " e9c9e7db5d5ff127b9f26359da5473b83897367f")
library(sf)
library(tidyverse)
library(lidR)
# library(doParallel)
# library(foreach)
library(lidRmts)
library(landscapemetrics)
path <- "C:/Users/Ryan/OneDrive/Documents/Projects/FUWI/"
# load in lidar catalog
ctg <- catalog(paste0(path,"norm_las/"))
# load in stem mapped data from the field to look at max crown radius
trees <- read.csv(paste0(path,"field_data/FUWI_2018_Updated_wTreeloc.csv"))
trees <- trees %>% filter(height.m > 1.37)
## create plot sf dataframe with true size and 20 m buffer
plot.sf <- st_as_sf(trees, coords = c("plot.x", "plot.y"), crs = paste0(ctg@proj4string))
plot.sf$plotID <- paste0(plot.sf$block, "--", plot.sf$treatment, "--", plot.sf$plot)
plot.sf <- plot.sf %>% group_by(plotID) %>% summarise(ntrees = n(), block = mean(block), treatment = mean(treatment))
plot(ctg)
plot(plot.sf[,1],add = T)
i = 1
i = 1
# mt <- foreach(i =1:nrow(plot.sf),.packages = c("lidR","lidRmts", "sf", "landscapemetrics","tidyverse" ), .verbose = TRUE) %dopar%
#   {
mts <- data.frame(PlotID = plot.sf[i,]$plotID, block = as.character(plot.sf[i,]$block),
treatment = as.character(plot.sf[i,]$treatment), true_ntree = plot.sf[i,]$ntrees)
las.t <- lasclip(ctg, plot.sf[i,], radius = 11.34970)
if (is.null(las.t)) return(NULL)
las.veg <- las.t %>% lasfilter(Classification == 1)
plot(las.veg)
las.veg <- las.t %>% lasfilter(Classification == 1)
# calculate cloud metrics
las.cloud <- las.t %>%  lasfilter(Z >= 1.37)
vox <- lidR::voxel_metrics(las.veg, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
resolution = 1
# std_voxel <- function(las, resolution){
#
vox <- lidR::voxel_metrics(las.veg, func = vox_mt(Z, as.numeric(Intensity)), res = resolution)
# create all possible voxels
x = seq(min(vox$X), max(vox$X), resolution)
y = seq(min(vox$Y), max(vox$Y), resolution)
z = seq(min(vox$Z), max(vox$Z), resolution)
all_vox = expand.grid(X = x, Y = y, Z = z)
data.table::setDT(all_vox)
# merge all and voxel_metrics() output
fullvox = vox[all_vox, on = c("X", "Y", "Z")]
voxel_mt <- std_voxel(las.veg, 1)
# give each voxel a unique id and assign 0s and NAs where appropriate
fullvox <- fullvox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox$SVi[is.na(fullvox$SVi)] <- 0
null_list <- lapply(fullvox$Z_list,is.null)
fullvox$Z_list[do.call(rbind,null_list)] <- NA
fullvox$I_list[do.call(rbind,null_list)] <- NA
##### Individual voxel metrics
### FR_SVi is the frequency ratio of the number of returns in a voxel in relation to total returns (in Pearse et al. 2019 this is FR_Di)
fullvox <- fullvox %>% mutate(FR_SVi = SVi/sum(fullvox$SVi))
View(voxel_mt)
### P_Di is the number of returns below each voxel (Pearse et al. 2019; Kim et al. 2016 uses returns above)
# create a vector for Z in each iteration
Zi = fullvox$Z
# for loop to calculate points below each voxel
point_blow = list()
for(i in 1:length(unique(fullvox$Z))){
np_b <- fullvox %>%
group_by(X,Y) %>%
filter(Z < unique(Z)[i]) %>%
summarize(npoints_below = sum(SVi), Z= unique(Zi)[i])
point_blow[[i]] <- np_b
}
# extract point below data and merge using the voxel id
point_blow_all_vox <- do.call(rbind,point_blow)
point_blow_all_vox <- point_blow_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_blow_all_vox[,c(3,5)]), by = "id_xyz", )
### P_Di_above is the number of returns above each voxel (Kim et al. 2016 uses returns above as P_Di)
# for loop to calculate points below each voxel
point_above = list()
for(i in 1:length(unique(fullvox$Z))){
np_a <- fullvox %>%
group_by(X,Y) %>%
filter(Z > unique(Z)[i]) %>%
summarize(npoints_above = sum(SVi, na.rm = T), Z= unique(Zi)[i])
point_above[[i]] <- np_a
}
# extract point below data and merge using the voxel id
point_above_all_vox <- do.call(rbind,point_above)
point_above_all_vox <- point_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(point_above_all_vox[,c(3,5)]), by = "id_xyz", )
# NAs returned for 0 points so it is appropriate to replace them with 0
fullvox$npoints_above[is.na(fullvox$npoints_above)] <- 0
### FR_Di is the frequency ratio of the number of returns above a voxel in relation to total returns (Kim et al. 2016)
fullvox <- fullvox %>% mutate(FR_Di = npoints_above/sum(fullvox$SVi))
### I_Di is the median intensity of returns above each voxel
# for loop to calculate median intensity above each voxel
i_above = list()
for(i in 1:length(unique(fullvox$Z))){
i_a <- fullvox %>% filter(Z > Z[i])
i_a$I_list<- lapply( i_a$I_list, "length<-", max(lengths( i_a$I_list)))
i_abv <- as.data.frame(do.call(rbind, i_a$I_list))
i_a_merge <- cbind(as.data.frame(i_a), i_abv)
i_a_merge <- cbind(X = i_a_merge$X, Y = i_a_merge$Y, i_a_merge[,ncol(i_a)+1:(ncol(i_a_merge)-ncol(i_a))])
i_Di_mt <- i_a_merge %>% pivot_longer(cols = 3:ncol(i_a_merge)) %>%
group_by(X,Y) %>%
summarize(Z = unique(fullvox$Z)[i], i_Di = median(value, na.rm = T))
i_above[[i]] <- i_Di_mt
}
# extract point below data and merge using the voxel id
i_above_all_vox <- do.call(rbind,i_above)
i_above_all_vox <- i_above_all_vox %>% mutate(id_xyz = paste0(X,"-",Y,"-",Z))
fullvox <- fullvox %>% left_join(as.data.frame(i_above_all_vox[,c(4,5)]), by = "id_xyz" )
ggplot(fullvox) + geom_histogram(aes(FR_Di))
ggplot(fullvox[fullvox$SVi > 0,]) + geom_histogram(aes(FR_Di))
ggplot(fullvox[fullvox$SVi > 1,]) + geom_histogram(aes(FR_Di))
ggplot(fullvox[fullvox$SVi > 1,]) + geom_histogram(aes(SVI))
ggplot(fullvox[fullvox$SVi > 1,]) + geom_histogram(aes(SVi))
ggplot(fullvox) + geom_histogram(aes(SVi))
ggplot(fullvox) + geom_histogram(aes(SVi))
ggplot(fullvox) + geom_histogram(aes(FR_Di))
head(fullvox)
ggplot(fullvox) + geom_histogram(aes(i_Di))
unique(Z)
unique(full_vox$Z)
unique(fullvox$Z)
ggplot(fullvox) + geom_boxplot(aes(x = as.factor(Z),y =  i_Di))
ggplot(fullvox) + geom_boxplot(aes(x = Z,y =  i_Di))
ggplot(fullvox) + geom_point(aes(x = Z,y =  i_Di))
View(fullvox)
las.veg@data$Intensity
hist(las.veg@data$Intensity)
unique(las.veg@data$Intensity)
ggplot(fullvox) + geom_point(aes(x = Z,y =  FR_Di))
ggplot(fullvox) + geom_histogram(aes(FR_Di))
ggplot(fullvox) + geom_point(aes(x = X,y =  FR_Di))
ggplot(fullvox) + geom_point(aes(x = Z,y =  FR_Di))
ggplot(fullvox) + geom_boxplot(aes(x = Z,y =  FR_Di))
ggplot(fullvox) + geom_boxplot(aes(x = as.factor(Z),y =  FR_Di))
table(fullvox$Z)
table(fullvox$SVi)
table(las.veg@data$Z < 1)
fullvox$SVi[1:10,]
fullvox$SVi[1:10]
ggplot(fullvox[fullvox$SVi > 0]) + geom_boxplot(aes(x = as.factor(Z),y =  FR_Di))
ggplot(fullvox[fullvox$SVi > 0,]) + geom_boxplot(aes(x = as.factor(Z),y =  FR_Di))
ggplot(fullvox[fullvox$SVi > 0,]) + geom_point(aes(x = as.factor(Z),y =  i_Di))
ggplot(fullvox[fullvox$SVi > 0,]) + geom_boxplot(aes(x = as.factor(Z),y =  i_Di))
ggplot(fullvox[fullvox$SVi > 0,]) + geom_violin(aes(x = as.factor(Z),y =  i_Di))
ggplot(fullvox[fullvox$SVi > 0,]) + geom_violin(aes(x = as.factor(Z),y =  i_Di)) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin() + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin(trim = F) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin(trim = F, COlor = as.factor(Z)) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin(trim = F, aes(COlor = as.factor(Z))) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin(trim = F, aes(color = as.factor(Z))) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin(trim = F, aes(fill = as.factor(Z))) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  i_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z))) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  FR_Di)) + geom_violin(trim = F, aes(fill = as.factor(Z))) + geom_boxplot(width=0.1)
fullvox[fullvox$Z == 24]
fullvox[fullvox$Z == 24]
fullvox[fullvox$Z == 24,]
fullvox[fullvox$Z == 24 & fullvox$SVi > 0,]
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  FR_Di)) + geom_violin(trim = F, aes(fill = as.factor(Z))) + geom_boxplot(width=0.1)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  FR_Di)) + geom_violin(trim = F, aes(fill = as.factor(Z)))
hist(fullvox$FR_Di)
max(fullvox$FR_Di)
min(fullvox$FR_Di)
ggplot(fullvox[fullvox$SVi > 0,], aes(x = as.factor(Z),y =  FR_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z)))
ggplot(fullvox[fullvox$SVi > 0,], aes(x = Z,y =  FR_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z)))
ggplot(fullvox[fullvox$SVi > 0,], aes(y =  FR_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z)))
ggplot(fullvox[fullvox$SVi > 0,], aes(Z = SVI =  FR_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z)))
ggplot(fullvox[fullvox$SVi > 0,], aes(x = SVI, y =  FR_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z)))
ggplot(fullvox[fullvox$SVi > 0,], aes(x = SVi, y =  FR_Di)) + geom_violin(trim = T, aes(fill = as.factor(Z)))
#write.csv(df, "FUWI_lidRmts_summ.csv")
read.csv("FUWI_lidRmts_summ.csv")
#write.csv(df, "FUWI_lidRmts_summ.csv")
df <- read.csv("FUWI_lidRmts_summ.csv")
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	pcc))
#write.csv(df, "FUWI_lidRmts_summ.csv")
df <- read.csv("FUWI_lidRmts_summ.csv")
ggplot(df) + geom_boxplot(aes(x = treatment, y = 	division))
df$div_group <- cut(df$division, breaks = quantile(df$division, c(0,0.25, 0.5, 0.75, 1)),
labels = c("lowest", "low", "high", "highest"))
df$pcc_group <- cut(df$pcc, breaks = quantile(df$pcc, c(0,0.25, 0.5, 0.75, 1)),
labels = c("lowest", "low", "high", "highest"))
df$ENL_d2_group <- cut(df$ENL_d2, breaks = quantile(df$ENL_d2, c(0,0.25, 0.5, 0.75, 1)),
labels = c("lowest", "low", "high", "highest"))
set.seed = 451
test <- stratified(df, c("div_group","pcc_group", "ENL_d2_group"), 1)
